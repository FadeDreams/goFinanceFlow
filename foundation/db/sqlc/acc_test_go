package db

import (
	"context"
	"log"
	"testing"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/stretchr/testify/require"
)

var testStore Store

func createRandomAccount(t *testing.T) Account {
	q := createTestQueries(t)

	connPool, err := pgxpool.New(context.Background(), "postgresql://postgres:postgres@localhost:5432/ffdb?sslmode=disable")
	if err != nil {
		log.Fatal("cannot connect to db:", err)
	}

	username := "testuser"
	hashedPassword := "hashedpassword"
	fullName := "Test User"
	email := "test@example.com"

	_, err1 := q.CreateUser(context.Background(), CreateUserParams{
		Username:       username,
		HashedPassword: hashedPassword,
		FullName:       fullName,
		Email:          email,
	})
	require.NoError(t, err1)

	testStore = NewStore(connPool)
	arg := CreateAccountParams{
		Owner:    "u1",
		Balance:  100,
		Currency: "USD",
	}

	account, err := testStore.CreateAccount(context.Background(), arg)
	require.NoError(t, err)
	require.NotEmpty(t, account)

	require.Equal(t, arg.Owner, account.Owner)
	require.Equal(t, arg.Balance, account.Balance)
	require.Equal(t, arg.Currency, account.Currency)

	require.NotZero(t, account.ID)
	require.NotZero(t, account.CreatedAt)

	return account
}

func TestCreateAccount(t *testing.T) {
	createRandomAccount(t)
}
