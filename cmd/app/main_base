
// cmd/app/main.go

package main

import (
	"context"
	"log"
	"net"

	"github.com/fadedreams/gofinanceflow/cmd/api"
	db "github.com/fadedreams/gofinanceflow/infrastructure/db/sqlc"
	"github.com/jackc/pgx/v5/pgxpool"

	"github.com/fadedreams/gofinanceflow/cmd/grpc_api"
	"github.com/fadedreams/gofinanceflow/infrastructure/pb"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func main() {
	connStr := "postgresql://postgres:postgres@localhost:5432/ffdb?sslmode=disable"
	ctx := context.Background()

	// Create a connection pool
	pool, err := pgxpool.New(ctx, connStr)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v\n", err)
	}
	defer pool.Close()
	// Create a new Queries instance
	queries := db.New(pool)
	runEchoServer(queries, pool)
	runGrpcServer(queries, pool)
}

func runGrpcServer(queries *db.Queries, pool *pgxpool.Pool) {
	// Initialize the gRPC server
	grpcServer := grpc.NewServer()
	server := grpc_api.NewServer(queries, pool)

	pb.RegisterFinanceFlowServer(grpcServer, server)

	// Register reflection service on gRPC server.
	reflection.Register(grpcServer)

	// Start the gRPC server
	address := ":9091"
	listener, err := net.Listen("tcp", address)
	if err != nil {
		log.Fatalf("Failed to listen on %s: %v", address, err)
	}

	log.Printf("Starting gRPC server on %s\n", address)
	if err := grpcServer.Serve(listener); err != nil {
		log.Fatalf("Failed to start gRPC server: %v", err)
	}

}

func runEchoServer(queries *db.Queries, pool *pgxpool.Pool) {
	// Initialize the Echo server with both queries and pool
	server := api.NewServer(queries, pool)

	// Start the server
	address := ":8080"
	log.Printf("Starting server on %s\n", address)
	if err := server.Start(address); err != nil {
		log.Fatalf("Failed to start server: %v\n", err)
	}
}
